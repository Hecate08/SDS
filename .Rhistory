path = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/"
pathK = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/kidney/"
pathL = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/lung/"
pathB = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/bladder/"
filteredExp_kidney = readRDS(file = paste0(pathK,"filteredExp_kidney"))
filteredClin_clust4_kidney = readRDS(file = paste0(pathK,"filteredClin_dummy_kidney"))
#filteredClin_clust4_m_kidney = as.matrix(filteredClin_clust4_kidney)
surv_kidney = readRDS(file = paste0(pathK,"survival_kidney"))
trainingSizeK = floor((dim(surv_kidney)[1]/3)*2)
class(filteredExp_kidney)
head(filteredExp_kidney)
class(surv_kidney)
head(surv_kidney)
class(filteredClin_clust4_kidney)
head(filteredClin_clust4_kidney)
expressio = filteredExp_kidney
filteredClinDummy = filteredClin_clust4_kidney
survv = surv_kidney
trainingSize2 = trainingSizeK
expFil = "cor"
corrT = 0.6
top = 75
cIndexUnP = rep(NA, 2)
print(paste("seed",i))
set.seed(i)
training <- sample(rownames(survv), size = trainingSize2)
test <- rownames(survv)[!(rownames(survv) %in% training)]
survObjectTraining <- Surv(survv[training,]$OVERALL.SURVIVAL,
survv[training,]$overall.survival.indicator)
i = 1
expFil = "cor"
corrT = 0.6
top = 75
cIndexUnP = rep(NA, 2)
print(paste("seed",i))
set.seed(i)
training <- sample(rownames(survv), size = trainingSize2)
test <- rownames(survv)[!(rownames(survv) %in% training)]
survObjectTraining <- Surv(survv[training,]$OVERALL.SURVIVAL,
survv[training,]$overall.survival.indicator)
library(survival)
#install.packages("glmnet")
library(glmnet)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("survcomp", version = "3.8")
library(survcomp)
library(matrixStats)
expFil = "cor"
corrT = 0.6
top = 75
cIndexUnP = rep(NA, 2)
print(paste("seed",i))
set.seed(i)
training <- sample(rownames(survv), size = trainingSize2)
test <- rownames(survv)[!(rownames(survv) %in% training)]
survObjectTraining <- Surv(survv[training,]$OVERALL.SURVIVAL,
survv[training,]$overall.survival.indicator)
print("scores")
score1 = survivalFisherScore1(filteredExp = expressio[,training], survv = survv[training,])
names(score1) = rownames(expressio)
survivalFisherScore1 <- function(filteredExp, survv){
RowVar <- function(x, ...) {
rowSums((x - rowMeans(x, ...))^2, ...)/(dim(x)[2] - 1)
}
sigma2 = RowVar(filteredExp)
# sorted timepoints of events
timepoints <- sort(unique(survv[survv$overall.survival.indicator==1,]$OVERALL.SURVIVAL))
# vector of weights for each gene
sds <- rep(0, each=dim(filteredExp)[1])
for (t in timepoints){
#print(t)
m <- rowMeans(subset(filteredExp, select = rownames(survv[survv$OVERALL.SURVIVAL >= t,])))
m[is.nan(m)] = 0 # this transforms all NaN into 0
n = dim(subset(filteredExp, select = rownames(survv[survv$OVERALL.SURVIVAL >= t,])))[2]
mh <- rowMeans(subset(filteredExp, select = rownames(survv[survv$OVERALL.SURVIVAL <= t & survv$overall.survival.indicator==1,])))
mh[is.nan(mh)] = 0 # this transforms all NaN into 0
nh = dim(subset(filteredExp, select = rownames(survv[survv$OVERALL.SURVIVAL <= t & survv$overall.survival.indicator==1,])))[2]
# function
# look only at patients with event at time t
patients <- rownames(survv[survv$OVERALL.SURVIVAL == t & survv$overall.survival.indicator == 1,])
w1 = rep(0, each=dim(filteredExp)[1])
for (p in patients){
w1 = w1 + n*(filteredExp[,p] - m)^2 + nh*(filteredExp[,p] - mh)^2
}
w1 = w1/length(patients)
sds <- sds + w1
}
sds <- sds/sigma2
return(sds)
}
#survivalFisherScore1 <- function(filteredExp, survv){
#
#  overallMean = rowMeans(filteredExp)
#  RowVar <- function(x, ...) {
#    rowSums((x - rowMeans(x, ...))^2, ...)/(dim(x)[2] - 1)
#  }
#  sigma2 = RowVar(filteredExp)
#  # sorted timepoints of events
#  timepoints <- sort(unique(survv[survv$overall.survival.indicator==1,]$OVERALL.SURVIVAL))
#  # vector of weights for each gene
#  w1 <- rep(0, each=dim(filteredExp)[1])
#
#  for (t in timepoints){
#    #print(t)
#    m <- rowMeans(subset(filteredExp, select = rownames(survv[survv$OVERALL.SURVIVAL >= t,])))
#    m[is.nan(m)] = 0 # this transforms all NaN into 0
#    n = dim(subset(filteredExp, select = rownames(survv[survv$OVERALL.SURVIVAL >= t,])))[2]
#
#
#    mh <- rowMeans(subset(filteredExp, select = rownames(survv[survv$OVERALL.SURVIVAL <= t & survv$overall.survival.indicator==1,])))
#    mh[is.nan(mh)] = 0 # this transforms all NaN into 0
#    nh = dim(subset(filteredExp, select = rownames(survv[survv$OVERALL.SURVIVAL <= t & survv$overall.survival.indicator==1,])))[2]
#
#    # function
#    w1 <- w1 + n*(m - overallMean)^2 + nh*(mh - overallMean)^2
#
#  }
#  w1 <- w1/sigma2
#  return(w1)
#}
survivalReliefScore2 <- function(trainingExp,trainingClin){
lenE = dim(trainingExp)[1]
R2adj = rep(NA,lenE)
for(f in 1:lenE){
fit = lm(trainingExp[f,] ~ .,data = trainingClin)
R2adj[f] = summary(fit)$adj.r.squared
}
R2adj_ok = as.numeric(gsub(NaN, 1, R2adj))
names(R2adj_ok) = rownames(trainingExp)
score2 = 1 - R2adj_ok
#score2 = R2adj_ok
return(score2)
}
corrGroupFilter = function(expres_top50, expres_top50_test, corrT, top, score1){
corrMatrix = cor(expres_top50, method = "spearman")
diag(corrMatrix) = 0
lenC = dim(corrMatrix)[1]
expres_top50_corr = expres_top50
delete = c()
newFeatures = matrix(NA, ncol = top, nrow = dim(expres_top50_corr)[1])
rownames(newFeatures) = rownames(expres_top50_corr)
newFeatures_test = matrix(NA, ncol = top, nrow = dim(expres_top50_test)[1])
rownames(newFeatures_test) = rownames(expres_top50_test)
n = 1
for(f in 1:lenC){
#print(f)
name = rownames(corrMatrix)[f]
filteredCorrMatrixNames = rownames(corrMatrix)
if(length(delete)>0){
filteredCorrMatrixNames = rownames(corrMatrix)[- which(rownames(corrMatrix) %in% delete)]
}
if(is.element(name, filteredCorrMatrixNames)){
filteredCorrMatrix = corrMatrix[filteredCorrMatrixNames,filteredCorrMatrixNames]
geneTrue = filteredCorrMatrix[name,]>corrT
newFeatures[,n] = expres_top50_corr[,name]
newFeatures_test[,n] = expres_top50_test[,name]
if(sum(geneTrue) > 0){
groupNames = c(name, names(geneTrue[geneTrue]))
delete = c(delete, groupNames)
scoresWeights = score1[groupNames]/sum(score1[groupNames])
newFeatures[,n] = rowSums(t(t(expres_top50_corr[,groupNames]) * scoresWeights))
newFeatures_test[,n] = rowSums(t(t(expres_top50_test[,groupNames]) * scoresWeights))
}
n = n + 1
}
}
newFeatures = newFeatures[, !apply(is.na(newFeatures), 2, all)]
newFeatures_test = newFeatures_test[, !apply(is.na(newFeatures_test), 2, all)]
#  topnew = top
#  if(top > length(filteredCorrMatrixNames)){
#    print(paste("topnew:", length(filteredCorrMatrixNames)))
#    topnew = length(filteredCorrMatrixNames)
#  }
#  score1_new2 = sort(score1[filteredCorrMatrixNames],decreasing = TRUE)
#  score1_expres_top50 = expres_top50[,names(score1_new2[1:topnew])]
features = list(training = newFeatures, test = newFeatures_test)
return(features)
}
meanRiskScoreFunction = function(dataTrai,dataTe,survObject,alp){
riskScoreTest = matrix(NA, ncol = 10, nrow = dim(dataTe)[1])
riskScoreTraining = matrix(NA, ncol = 10, nrow = dim(dataTrai)[1])
for(f in 1:10){
#print(f)
cvglmfit = cv.glmnet(dataTrai,survObject,family = "cox", nfolds = 5, alpha = alp)
glmPredTest = predict(object = cvglmfit, newx = dataTe, s = "lambda.min", type = "link")
riskScoreTest[,f] = exp(glmPredTest)
#riskScoreTest[,f] = glmPredTest
glmPredTraining = predict(object = cvglmfit, newx = dataTrai, s = "lambda.min", type = "link")
riskScoreTraining[,f] = exp(glmPredTraining)
#riskScoreTraining[,f] = glmPredTraining
}
meanRiskScore = list(training = rowMeans(riskScoreTraining,na.rm=TRUE), test = rowMeans(riskScoreTest,na.rm=TRUE))
return(meanRiskScore)
}
meanCIndexFunction = function(dataTrai,dataTe,te,trai,ty,surv,survObject,al){
cIndexeS1 = rep(NA,10)
for(f in 1:10){
#print(f)
cvglmfit = cv.glmnet(dataTrai,survObject,family = "cox", nfolds = 5, alpha = al)
if(ty == "test"){
glmPred = predict(object = cvglmfit, newx = dataTe, s = "lambda.min", type = "link")
cindex_validation = concordance.index(glmPred, surv.time = surv[te,]$OVERALL.SURVIVAL,
surv.event = surv[te,]$overall.survival.indicator,
method = "noether")
cIndexeS1[f] = cindex_validation$c.index
} else {
glmPred = predict(object = cvglmfit, newx = dataTrai, s = "lambda.min", type = "link")
cindex_validation = concordance.index(glmPred, surv.time = surv[trai,]$OVERALL.SURVIVAL,
surv.event = surv[trai,]$overall.survival.indicator,
method = "noether")
cIndexeS1[f] = cindex_validation$c.index
}
}
meanCIndex = mean(cIndexeS1,na.rm=TRUE)
return(meanCIndex)
}
print("scores")
score1 = survivalFisherScore1(filteredExp = expressio[,training], survv = survv[training,])
names(score1) = rownames(expressio)
print("scores")
score1 = survivalFisherScore1(filteredExp = expressio[,training], survv = survv[training,])
head(score1)
rm(score1)
print("scores")
score1 = survivalFisherScore1(filteredExp = expressio[,training], survv = survv[training,])
head(score1)
names(score1) = rownames(expressio)
head(score1)
class(score1)
score2 = survivalReliefScore2(trainingExp = expressio[,training], trainingClin = filteredClinDummy[training,])
head(score2)
weightUnp = 3
topGenes = names(score1)
score_combo = score1
#print(length(topGenes))
if(combos == "combo1"){
score_combo = score2Combination2(score1 = score1, score2, weightUnp)
topGenes = names(sort(score_combo, decreasing = TRUE))[1:top]
}
score_combo = score2Combination2(score1 = score1, score2, weightUnp)
topGenes = names(sort(score_combo, decreasing = TRUE))[1:top]
score2Combination2 = function(score1,score2,weight){
#print(combo)
# normalizing
mu = mean(score1)
std = sqrt(var(score1))
score1_normal = (score1 - mu)/std
names(score1_normal) = names(score1)
#plot(density(score1_normal))
mu = mean(score2[score2 != 0])
std = sqrt(var(score2[score2 != 0]))
score2_normal = (score2 - mu)/std
names(score2_normal) = names(score2)
#top 50 genes filtered by correlation
sum_normal = score1_normal + score2_normal*weight
names(sum_normal) = names(score1)
return(sum_normal)
}
score_combo = score2Combination2(score1 = score1, score2, weightUnp)
topGenes = names(sort(score_combo, decreasing = TRUE))[1:top]
class(score_combo)
head(score_combo)
topGenes = names(sort(score_combo, decreasing = TRUE))[1:top]
head(topGenes)
expres_top50 = t(expressio[topGenes,training])
expres_top50_test = t(expressio[topGenes,test])
score1_expres_top50 = list(training = expres_top50[,1:top], expres_top50_test[,colnames(expres_top50[,1:top])])
if(expFil == "cor"){
score1_expres_top50 = corrGroupFilter(expres_top50 = expres_top50, expres_top50_test = expres_top50_test, corrT = corrT, top = top, score1 = score_combo)
}
dataTrainingGLM <- score1_expres_top50$training
dataTestGLM <- score1_expres_top50$test
riskScoreList <- meanRiskScoreFunction(dataTrai = dataTrainingGLM,
dataTe = dataTestGLM,
survObject = survObjectTraining,
alp = 0)
head(dataTrainingGLM)
class(dataTrainingGLM)
survObjectTraining
class(survObjectTraining)
head(riskScoreList)
print("sds")
# score1 top genes
score1_top50_temp = sort(score1, decreasing = TRUE)[1:top]
topGenes = names(score1_top50_temp)
expres_top50 = t(expressio[topGenes,training])
expres_top50_test = t(expressio[topGenes,test])
score1_expres_top50 = list(training = expres_top50[,1:top], expres_top50_test[,colnames(expres_top50[,1:top])])
if(expFil == "cor"){
score1_expres_top50 = corrGroupFilter(expres_top50 = expres_top50, expres_top50_test = expres_top50_test, corrT = corrT, top = top, score1 = score1)
}
#######################
### score1 c.Index     ###
dataTrainingGLM <- score1_expres_top50$training
dataTestGLM <- score1_expres_top50$test
cIndexUnP[1] <- meanCIndexFunction(dataTrai = dataTrainingGLM,
dataTe = dataTestGLM,
te = test,
trai = training,
ty = "test",
surv = survv,
survObject = survObjectTraining, al = 0)
cIndexUnP[1]
setwd("./SDS")
getwd()
document()
library(SDS)
??SDS
?SDS
setwd("..")
getwd()
install("SDS")
install.packages("SDS")
install.packages("SDS")
library(devtools)
library(roxygen2)
install("SDS")
library(SDS)
?SDS
??SDS
?Score_S_Function
knitr::opts_chunk$set(echo = TRUE)
library(survival)
pathL = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/lung/"
filteredExp_lung = readRDS(file = paste0(pathL,"filteredExp_lung"))
filteredClin_clust4_lung = readRDS(file = paste0(pathL,"filteredClin_dummy_lung"))
surv_lung = readRDS(file = paste0(pathL,"survival_lung"))
trainingSizeL = floor((dim(surv_lung)[1]/3)*2)
pathL = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/lung/"
filteredExp_lung = readRDS(file = paste0(pathL,"filteredExp_lung"))
filteredClin_lung = readRDS(file = paste0(pathL,"filteredClin_dummy_lung"))
surv_lung = readRDS(file = paste0(pathL,"survival_lung"))
trainingSizeL = floor((dim(surv_lung)[1]/3)*2)
View(filteredClin_clust4_lung)
knitr::opts_chunk$set(echo = TRUE)
pathL = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/lung/"
corrT = 0.6 # threshold for pairwise correlation
top = 75 # number of selected best performing attributes
cIndexUnP = rep(NA, 2)
set.seed(i) # setting a random seed
corrT = 0.6 # threshold for pairwise correlation
top = 75 # number of selected best performing attributes
cIndexUnP = rep(NA, 2)
set.seed(1) # setting a random seed
trainingSize = floor((dim(surv_lung)[1]/3)*2)
training <- sample(rownames(surv_lung), size = trainingSize)
test <- rownames(surv_lung)[!(rownames(surv_lung) %in% training)]
survObjectTraining <- Surv(surv_lung[training,]$OVERALL.SURVIVAL,
surv_lung[training,]$overall.survival.indicator)
scoreS = Score_S_Function(attrib = filteredExp_lung[,training], surv = surv_lung)
filteredExp_lung[,training]
scoreS = Score_S_Function(attrib = filteredExp_lung[,training], surv = surv_lung[training,])
score_combo = score2Combination2(score1 = score1, score2, weightUnp)
install("SDS")
library(SDS)
score_combo = scoreCombination(scoreS = scoreS, scoreC = scoreC, weight = weight)
scoreC = Score_C_Function(attrib = filteredExp_lung[,training], clin = filteredClin_lung[training,])
score_combo = scoreCombination(scoreS = scoreS, scoreC = scoreC, weight = weight)
corrT = 0.6 # threshold for pairwise correlation
top = 75 # number of selected best performing attributes
weight = 1.3 # weight for scoreC in combination with scoreS
set.seed(1) # setting a random seed
trainingSize = floor((dim(surv_lung)[1]/3)*2) # number of subjects in training set
training <- sample(rownames(surv_lung), size = trainingSize) # subject names in training set
test <- rownames(surv_lung)[!(rownames(surv_lung) %in% training)] # subject names in test set
survObjectTraining <- Surv(surv_lung[training,]$OVERALL.SURVIVAL,
surv_lung[training,]$overall.survival.indicator) # survival object for training set
score_combo = scoreCombination(scoreS = scoreS, scoreC = scoreC, weight = weight)
topGenes = names(sort(score_combo, decreasing = TRUE))[1:top]
at_train = t(filteredExp_lung[topGenes,training]) #
at_test = t(filteredExp_lung[topGenes,test])
meta_features = corrGroupFilter(attrib_training = at_train, attrib_test = at_test, corrT = corrT, top = top, scores = score_combo)
at_train = t(filteredExp_lung[topGenes,training]) #
at_test = t(filteredExp_lung[topGenes,test])
meta_features = corrGroupFilter(attrib_training = at_train, attrib_test = at_test, corrT = corrT, top = top, scores = score_combo)
head(meta_features)
meta_features[1:5,1:5]
meta_features$training[1:5,1:5]
score_combo[1:5]
scoreS[1:5]
at_train = t(filteredExp_lung[topGenes,training]) #
at_test = t(filteredExp_lung[topGenes,test])
meta_features = corrGroupFilter(attrib_training = at_train, attrib_test = at_test, corrT = corrT, top = top, scores = score_combo)
meta_features$training[1:5,1:5]
meta_features$test[1:5,1:5]
dataTraining <- meta_features$training
dataTest <- meta_features$test
riskScoreList <- meanRiskScoreFunction(features_training = dataTraining, features_test = dataTest, survObject_training = survObject_training)
library(survival)
#install.packages("glmnet")
library(glmnet)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("survcomp", version = "3.8")
library(survcomp)
library(matrixStats)
library(SDS)
riskScoreList <- meanRiskScoreFunction(features_training = dataTraining, features_test = dataTest, survObject_training = survObject_training)
dataTraining <- meta_features$training
dataTest <- meta_features$test
riskScoreList <- meanRiskScoreFunction(features_training = dataTraining, features_test = dataTest, survObject_training = survObjectTraining)
riskScoreList
riskScoreList$training[1:5]
riskScoreList$test[1:5]
data_int_Training <- data.frame(filteredClin_lung[training,], riskScore = riskScoreList$training)
head(data_int_Training)
cfit <- coxph(survObjectTraining ~ ., dataTraining)
cfit <- coxph(survObjectTraining ~ ., data_int_Training)
cfit
cfit <- coxph(survObjectTraining ~ age + gender_male + tumor_stage_stage_iii + tumor_stage_stage_ii + tumor_stage_stage_iv + riskScore, data_int_Training)
cfit
predTest <- predict(object = cfit, newdata = data_int_Test, type = "lp")
data_int_Test <- data.frame(filteredClin_lung[test,], riskScore = riskScoreList$test)
cindex_validation = concordance.index(predTest, surv.time = survv[test,]$OVERALL.SURVIVAL,
surv.event = survv[test,]$overall.survival.indicator,
method = "noether")
predTest <- predict(object = cfit, newdata = data_int_Test, type = "lp")
cindex_validation = concordance.index(predTest, surv.time = survv[test,]$OVERALL.SURVIVAL,
surv.event = survv[test,]$overall.survival.indicator,
method = "noether")
cindex_validation = concordance.index(predTest, surv.time = surv_lung[test,]$OVERALL.SURVIVAL,
surv.event = surv_lung[test,]$overall.survival.indicator,
method = "noether")
cIndexe_temp[f] = cindex_validation$c.index
cIndexe_temp = rep(NA,10)
cIndexe_temp[f] = cindex_validation$c.index
for(f in 1:10){
cfit <- coxph(survObjectTraining ~ ., data_int_Training)
predTest <- predict(object = cfit, newdata = data_int_Test, type = "lp")
cindex_validation = concordance.index(predTest, surv.time = surv_lung[test,]$OVERALL.SURVIVAL,
surv.event = surv_lung[test,]$overall.survival.indicator,
method = "noether")
cIndexe_temp[f] = cindex_validation$c.index
}
cIndexe_temp
cIndex = cindex_validation$c.index
cIndex
pathK = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/kidney/computing cluster/"
pathL = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/lung/computing cluster/"
pathB = "S:/Biostats/BIO-STAT/Jeffrey Thompson/GRA/Neums/Projects/SurvivalOmics/results/TCGA/bladder/computing cluster/"
txt_file_name = paste0(pathL,"lung_SDSunpWeights_fisher5_spearman_seed","1",".rds")
dat = readRDS(txt_file_name)
cIndex100_SDSunpWeights_L = dat[,2]
for(f in 2:100){
txt_file_name = paste0(pathL,"lung_SDSunpWeights_fisher5_spearman_seed", f,".rds")
dat = readRDS(txt_file_name)
cIndex100_SDSunpWeights_L = cbind(cIndex100_SDSunpWeights_L,dat[,2])
}
colnames(cIndex100_SDSunpWeights_L) = seq(from = 1, to = 100, by = 1)
rownames(cIndex100_SDSunpWeights_L) = dat[,1]
cIndexSDSunpWeights_L = rowMeans(cIndex100_SDSunpWeights_L)
cIndex100unpWeights_L
cIndexSDSunpWeights_L
cIndex100_SDSunpWeights_L
cIndex100_SDSunpWeights_L["1.3",]
